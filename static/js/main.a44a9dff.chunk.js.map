{"version":3,"sources":["dumbell.svg","Pages/HomePage.js","Pages/LoginPage.js","NavBar.js","Pages/SummaryPage.js","CalendarObject/Tile/Tile.jsx","CalendarObject/Calendar.js","Pages/CalendarPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","react_default","a","createElement","src","logo","className","alt","react_router_dom","to","LoginPage","NavBar","SummaryPage","_useState","useState","_useState2","Object","slicedToArray","adviceObject","setAdvice","_getAdvice","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","abrupt","data","t0","console","log","stop","apply","this","arguments","useEffect","getAdvice","then","result","src_NavBar","id","style","backgroundColor","borderRadius","href","source","advice","Tile","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","row","col","isSelected","num","extraClassName","concat","Component","daysOfWeek","CalendarHeader","dayRow","map","value","initializeGrid","grid","currentRow","currentTile","push","CalendarBody","calendarBody","rowIndex","key","tile","tileIndex","Tile_Tile_Tile","Calendar","dateData","month","year","exampleDateData","dayOfWeek","dayOfMonth","CalendarPage","CalendarObject_Calendar","App","react_router","path","exact","element","Pages_HomePage","Pages_LoginPage","Pages_SummaryPage","Pages_CalendarPage","target","rel","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a44a9dff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dumbell.2e6e928c.svg\";","import React from 'react';\nimport logo from '../dumbell.svg';\nimport {Link} from 'react-router-dom';\n\nfunction HomePage()\n{\n\n  return (\n    <div>\n      <h3>GitFit: Home</h3>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div>\n        <li><Link to=\"/login\">Login</Link></li>\n        <li><Link to=\"/register\">Register</Link></li>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction LoginPage()\n{\n  // we probably want to redirect logged in users to summary page\n  // leave summary link in for now\n  return (\n    <div>\n      <h3>GitFit: Login</h3>\n      <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n// Vertical NavBar, create CSS for it\n// This will be an object that provides links to all of the other user pages\nfunction NavBar()\n{\n  return (\n    <div>\n      <ul>\n        <li><Link to=\"/summary\">Summary</Link></li>\n        <li><Link to=\"/calendar\">Calendar</Link></li>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport NavBar from '../NavBar';\n\nfunction SummaryPage()\n{\n  const [adviceObject, setAdvice] = useState({});\n\n  useEffect(() => {\n    getAdvice().then( result => {\n      if (result)\n        setAdvice(result);\n      });\n  }, [] ); // only load on render\n\n  async function getAdvice() {\n    try {\n      // returns an array of size 1 with advice object\n      const response = await axios.get('https://gitfit.lucasreyna.me/advice');\n      return response.data[0];     \n    }\n    catch (error){\n      // possible do something with no advice\n      console.log(error);\n      return false;\n    }\n  }\n\n  return (\n    <div>\n      <NavBar/> \n      <h3>GitFit: Summary</h3>\n      \n      <div id=\"adviceDisplay\" style={{\"backgroundColor\": \"darkgray\", \"borderRadius\": 15}}>\n        <a href={adviceObject.source}>{adviceObject.source}</a>\n        <p>\"{adviceObject.advice}\" -</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SummaryPage;","import React, {Component} from 'react';\nimport './Tile.css'\n\nexport default class Tile extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {};\n   }\n\n   render() {\n      // Determine if properties are true, in order to add it to class name\n      const {\n         row, \n         col,\n         isSelected,\n         num,\n         /*onMouseDown,\n         onMouseUp,\n         onMouseEnter,*/\n      } = this.props;\n      const extraClassName = isSelected\n         ? 'selected-tile'\n         : '';\n\n      return (\n        <div\n          id={`tile-${row}-${col}`}\n          className={`tile ${extraClassName}`}\n          /*onMouseDown={() => onMouseDown(row, col)}\n          onMouseUp={() => onMouseUp()}\n          onMouseEnter={() => onMouseEnter(row, col)}*/>{num}\n        </div>\n      );\n   }\n}\n","import React from 'react'\nimport './Calendar.css'\nimport Tile from './Tile/Tile';\n\nconst NUM_COLS = 7; // seven days in a week\nconst NUM_ROWS = 6; // at most 6 weeks to display\nconst daysOfWeek = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n// sets up the days of the week in table format\nfunction CalendarHeader()  {\n  const dayRow = daysOfWeek.map((value) => {\n    return (<th>{value}</th>);\n    }\n  );\n    return (\n      <thead>\n        <tr>\n          {dayRow}\n        </tr>\n      </thead>\n    );\n}\n\n// Create a matrix of row length and col length\nconst initializeGrid = () => {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < NUM_COLS; col++) {\n        const currentTile = {\n          row, // row value, set later\n          col, // col value, set later\n          num: 2, // num value of tile, set later\n          isSelected: false, // set all tiles to default\n        };\n        currentRow.push(currentTile);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\n// get the grid matrix, then assign a tile in each row for each col\nfunction CalendarBody(props) {\n  const grid = initializeGrid();\n  const calendarBody = grid.map((row, rowIndex) => {\n    // return from the column map, whole row\n    return (\n      <tr key={rowIndex}>\n        {row.map((tile, tileIndex) => {\n            const {isSelected, num} = tile; // is from the currentTile Object\n            // return from the row map, single Tile\n            return (\n              <td>\n                <Tile\n                  key={tileIndex}\n                  /*onMouseDown={(row, col) => handleMouseDown(row, col)}\n                  onMouseUp={(row, col) => handleMouseUp()}\n                  onMouseEnter={(row, col) => handleMouseEnter(row, col)}*/\n                  row={rowIndex}\n                  col={tileIndex}\n                  num={num}\n                  isSelected={isSelected}\n                  ></Tile>\n                </td>\n            );\n        })}\n      </tr>\n      );\n  });\n\n  // return the matrix of Tiles in a tbody object\n  return (\n    <tbody>\n        {calendarBody}\n    </tbody>\n  );\n}\n\nfunction Calendar(props) {\n    return (\n      <div className='calendar'>\n        <h4>{props.dateData.month} {props.dateData.year}</h4>\n        <table>\n            <CalendarHeader />\n            <CalendarBody /> \n        </table>\n      </div>\n    );\n}\n\nexport default Calendar;\n","import React from 'react';\nimport Calendar from '../CalendarObject/Calendar';\nimport NavBar from '../NavBar';\n\nconst exampleDateData = {\n  \"dayOfWeek\": \"Thursday\",\n  \"dayOfMonth\": 25,\n  \"month\": \"April\",\n  \"year\": 2022\n}\n\nfunction CalendarPage()\n{\n  return (\n    <div>\n      <NavBar />\n      <h3>GitFit: Calendar</h3>\n      <Calendar dateData={exampleDateData}/>\n    </div>\n  );\n}\n\nexport default CalendarPage;","import React from 'react';\nimport './App.css';\nimport HomePage from './Pages/HomePage';\nimport LoginPage from './Pages/LoginPage';\nimport RegisterPage from './Pages/LoginPage';\nimport SummaryPage from './Pages/SummaryPage';\nimport CalendarPage from './Pages/CalendarPage';\nimport {Route, Routes} from 'react-router-dom';\n\nfunction App() {\n\n  // note that the Route changes what's being rendered, it doesn't actually load a new page\n  // we might want to have a folder with all of the pages inside\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"This is the routes set up div\">\n          <Routes>\n            <Route path=\"/\" exact element={<HomePage />}/>\n            <Route path=\"/login\" exact element={<LoginPage />}/>\n            <Route path=\"/register\" element={<RegisterPage />} />\n            <Route path=\"/summary\" element={<SummaryPage />} />\n            <Route path=\"/calendar\" element={<CalendarPage />} />\n          </Routes>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/LukeSandsor/GitFit-App\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Link to GitHub Repo\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}