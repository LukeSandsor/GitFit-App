{"version":3,"sources":["dumbell.svg","images/home_icon.svg","images/calendar_icon.svg","images/dumbbell.png","images/PushLogo.png","images/PullLogo.png","images/LegsLogo.png","Pages/HomePage.js","Pages/LoginPage.js","NavBar.js","Pages/SummaryPage.js","CalendarObject/Tile/Tile.jsx","CalendarObject/Calendar.js","Pages/CalendarPage.js","Pages/WeightsPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","react_default","a","createElement","src","logo","className","alt","react_router_dom","to","LoginPage","NavBar","title","homeIcon","calendarIcon","weightIcon","SummaryPage","_useState","useState","_useState2","Object","slicedToArray","adviceObject","setAdvice","_getAdvice","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","abrupt","data","t0","console","log","stop","apply","this","arguments","useEffect","getAdvice","then","result","class","src_NavBar","id","style","backgroundColor","borderRadius","href","source","advice","Tile","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","row","col","mood","isNotActive","num","onMouseDown","extraClassName","concat","Component","NUM_COLS","NUM_ROWS","daysOfWeek","monthStrs","CalendarHeader","dayRow","map","value","index","key","Calendar","Date","getMonth","currentMonth","setCurrentMonth","_useState3","getFullYear","_useState4","currentYear","setCurrentYear","_useState5","_useState6","selectedTile","setSelectedTile","_useState7","_useState8","calendarBody","setCalendar","UpdateCalendar","incrementMonth","numYears","Math","floor","abs","newMonthVal","handleMouseDown","tileObject","document","getElementById","classList","length","dateData","currentMood","currentDay","firstDayOfWeekIndex","getDay","active","finished","grid","currentRow","currentTile","def_mood","def_num","push","initializeGrid","rowIndex","tile","tileIndex","Tile_Tile_Tile","setDate","getDate","undefined","loadCalendarBodyInfo","exampleDateData","onClick","CalendarPage","CalendarObject_Calendar","WeightsPage","pushLogo","verticalAlign","maxWidth","textAlign","color","fontSize","type","name","pullLogo","legsLogo","App","width","react_router","path","exact","element","Pages_HomePage","Pages_LoginPage","Pages_SummaryPage","Pages_CalendarPage","Pages_WeightsPage","target","rel","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.372dde72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dumbell.2e6e928c.svg\";","module.exports = __webpack_public_path__ + \"static/media/home_icon.293e730f.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar_icon.bcdfe888.svg\";","module.exports = __webpack_public_path__ + \"static/media/dumbbell.87d71c09.png\";","module.exports = __webpack_public_path__ + \"static/media/PushLogo.dddcf89c.png\";","module.exports = __webpack_public_path__ + \"static/media/PullLogo.26e15e4f.png\";","module.exports = __webpack_public_path__ + \"static/media/LegsLogo.047d97b4.png\";","import React from 'react';\nimport logo from '../dumbell.svg';\nimport {Link} from 'react-router-dom';\n\nfunction HomePage()\n{\n\n  return (\n    <div>\n      <h3>GitFit: Home</h3>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div>\n        <li><Link to=\"/login\">Login</Link></li>\n        <li><Link to=\"/register\">Register</Link></li>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction LoginPage()\n{\n  // we probably want to redirect logged in users to summary page\n  // leave summary link in for now\n  return (\n    <div>\n      <h3>GitFit: Login</h3>\n      <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './NavBar.css';\nimport homeIcon from './images/home_icon.svg';\nimport calendarIcon from './images/calendar_icon.svg';\nimport weightIcon from './images/dumbbell.png';\n\n/* Vertical NavBar using fixed positioning in CSS\n  This will be an object that provides links to all of the other user pages\n  \n  Navbar should be a list of nested links\n  The title attribute of links shows text when you hover over it\n*/\nfunction NavBar()\n{\n  return (\n    <div className='navbar'>\n      <ul>\n        <li>\n          <Link to=\"/summary\" title=\"Summary\">\n            <img src={homeIcon} className=\"navbar-icon\" alt=\"Home\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/calendar\" title=\"Calendar\">\n            <img src={calendarIcon} className=\"navbar-icon\" alt=\"Calendar\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/weights\" title=\"Weight Training\">\n            <img src={weightIcon} className=\"navbar-icon\" alt=\"Weight\" />\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport NavBar from '../NavBar';\n\nfunction SummaryPage()\n{\n  const [adviceObject, setAdvice] = useState({});\n\n  useEffect(() => {\n    getAdvice().then( result => {\n      if (result)\n        setAdvice(result);\n      });\n  }, []); // only load on render\n\n  async function getAdvice() {\n    try {\n      // returns an array of size 1 with advice object\n      const response = await axios.get('https://gitfit.lucasreyna.me/advice');\n      return response.data[0];     \n    }\n    catch (error){\n      // possible do something with no advice\n      console.log(error);\n      return false;\n    }\n  }\n\n  return (\n    <div class=\"user-page\">\n      <NavBar/>\n      <h3>GitFit: Summary</h3>\n      <div id=\"adviceDisplay\" style={{\"backgroundColor\": \"darkgray\", \"borderRadius\": 15}}>\n        <a href={adviceObject.source}>{adviceObject.source}</a>\n        <p>\"{adviceObject.advice}\" -</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SummaryPage;","import React, {Component} from 'react';\nimport './Tile.css'\n\nexport default class Tile extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {};\n   }\n\n   render() {\n      // Determine if properties are true, in order to add it to class name\n      const {\n        row, \n        col,\n        mood,\n        isNotActive,\n        num,\n        onMouseDown\n      } = this.props;\n      const extraClassName = isNotActive ? 'inactive-tile' : '';\n\n      return (\n        <div\n          id={`tile-${row}-${col}`}\n          className={`tile ${extraClassName}`}\n          onMouseDown={() => onMouseDown(row, col)}>\n            <div className='tile-num'>\n              <span>{num}</span>\n            </div>\n            <div className='tile-mood'>\n              <span >{mood}</span>\n            </div>\n        </div>\n      );\n   }\n}\n","import React, {useState, useEffect} from 'react'\nimport './Calendar.css'\nimport Tile from './Tile/Tile';\nimport exampleDateData from './ExampleCalendarData.json'; // For testing purposes\n\nconst NUM_COLS = 7; // seven days in a week\nconst NUM_ROWS = 6; // at most 6 weeks to display\nconst daysOfWeek = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\nconst monthStrs = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n// sets up the days of the week in table format\nfunction CalendarHeader() {\n  const dayRow = daysOfWeek.map((value, index) => {\n    return (<th key={index} class=\"day-week-text\">{value}</th>);\n    }\n  );\n    return (\n      <thead>\n        <tr>\n          {dayRow}\n        </tr>\n      </thead>\n    );\n}\n\nfunction Calendar() {\n  const [currentMonth, setCurrentMonth] = useState((new Date()).getMonth());\n  const [currentYear, setCurrentYear] = useState((new Date()).getFullYear());\n  const [selectedTile, setSelectedTile] = useState();\n  const [calendarBody, setCalendar] = useState();\n\n  // runs on first render, and any time month or selected tile is changed\n  useEffect(() => {\n    setCalendar(loadCalendarBodyInfo(exampleDateData));\n  }, [currentMonth, selectedTile]);\n\n  function UpdateCalendar(incrementMonth) {\n    // in case value > 12\n    const numYears = Math.floor(Math.abs(incrementMonth / 12)) + 1;\n    const newMonthVal = currentMonth + incrementMonth;\n\n    if (newMonthVal < 0) {\n      // needed for positive modulo result\n      setCurrentMonth(((newMonthVal % 12) + 12) % 12);\n      setCurrentYear(currentYear - numYears); \n    }\n    else if (newMonthVal > 11) {\n      setCurrentMonth(newMonthVal % 12);\n      setCurrentYear(currentYear + numYears); \n    }\n    else {\n      setCurrentMonth(newMonthVal);\n    }\n  }\n\n  function handleMouseDown(row, col)\n  {\n    let tileObject = document.getElementById(`tile-${row}-${col}`);\n\n    // make sure tile is active and not already selected\n    // set tile Object as selected and change its class\n    if (tileObject.classList.length === 1) {\n      // change previous tile to a default active tile\n      // make sure it's not undefined\n      if (selectedTile)\n        selectedTile.className = 'tile ';\n      setSelectedTile(tileObject);\n      tileObject.className += 'selected-tile';\n    }\n  }\n\n  // Create a matrix of row length and col length\n  function initializeGrid() {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLS; col++) {\n          const currentTile = {\n            row, // row value, set later\n            col, // col value, set later\n            def_mood: \"\", // mood value\n            def_num: \"\", // num value of tile, set later\n            onMouseDown: (row, col) => handleMouseDown(row, col),\n            isNotActive: true, // set all tiles to default\n          };\n          currentRow.push(currentTile);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  function loadCalendarBodyInfo(dateData) {\n    let currentMood = \"\";\n    let currentDay = new Date(currentYear, currentMonth, 1);\n\n    let firstDayOfWeekIndex = currentDay.getDay(); // 0 to 6, sunday is first\n    let active = false;\n    let finished = false;\n\n    const grid = initializeGrid();\n    const calendarBody = grid.map((row, rowIndex) => {\n      // return from the column map, whole row\n      return (\n        <tbody>\n          <tr key={rowIndex}>\n            {row.map((tile, tileIndex) => {\n                // return from the row map, single Tile\n                const {onMouseDown, def_mood, def_num} = tile; // is from the currentTile Object\n\n                // wait until proper day of the week\n                if (!active) {\n                  // check day of the week before index\n                  if (firstDayOfWeekIndex === tileIndex && !finished)\n                  {\n                    // needed to offset currentDay to 1 \n                    currentDay.setDate(currentDay.getDate() - 1);\n                    active = true;\n                  }\n                  else {\n                    // return blank tile\n                    return (\n                      <td>\n                        <Tile\n                          key={tileIndex}\n                          onMouseDown={onMouseDown}\n                          row={rowIndex}\n                          col={tileIndex}\n                          mood={def_mood}\n                          num={def_num}\n                          isNotActive={true}\n                          ></Tile>\n                      </td>\n                    );\n                  }\n                }\n\n                if (active) {\n                  currentDay.setDate(currentDay.getDate() + 1);\n                  if (currentMonth === currentDay.getMonth()) {\n                    // check if this day has a mood loggged\n                    if (dateData[currentYear][currentMonth][currentDay.getDate()] !== undefined) {\n                      currentMood = dateData[currentYear][currentMonth][currentDay.getDate()].mood;\n                    }\n                    else {\n                      currentMood = \"\";\n                    }\n\n                    return (\n                      <td>\n                        <Tile\n                          key={tileIndex}\n                          onMouseDown={onMouseDown}\n                          row={rowIndex}\n                          col={tileIndex}\n                          mood={currentMood}\n                          num={currentDay.getDate()}\n                          isNotActive={false}\n                          ></Tile>\n                        </td>\n                    );\n                  }\n                  else // return blank tile when loading ends\n                  {\n                    finished = true;\n                    active = false;\n                    return (\n                      <td>\n                        <Tile\n                          key={tileIndex}\n                          onMouseDown={onMouseDown}\n                          row={rowIndex}\n                          col={tileIndex}\n                          mood={def_mood}\n                          num={def_num}\n                          isNotActive={true}\n                          ></Tile>\n                      </td>\n                    );\n                  }\n                }\n            // return default to suppres warnings\n            return <Tile />;})}\n          </tr>\n        </tbody>\n      );\n    });\n\n    return calendarBody;\n  }\n\n  return (\n    <div className='calendar'>\n      <div>\n        <button class=\"arrow-button\" onClick={() => UpdateCalendar(-1)}>&#8678;</button>\n        <span id=\"month-year-text\">{monthStrs[currentMonth]} {currentYear}</span>\n        <button class=\"arrow-button\" onClick={() => UpdateCalendar(1)}>&#8680;</button>\n      </div>\n      <table>\n          <CalendarHeader />\n          {calendarBody}\n      </table>\n    </div>\n  );\n}\n\nexport default Calendar;\n","import React from 'react';\nimport Calendar from '../CalendarObject/Calendar';\nimport NavBar from '../NavBar';\n\n\nfunction CalendarPage()\n{\n  return (\n    <div>\n      <NavBar />\n      <h3>GitFit: Calendar</h3>\n      <Calendar />\n    </div>\n  );\n}\n\nexport default CalendarPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './WeightsPage.css';\nimport pushLogo from \"../images/PushLogo.png\";\nimport pullLogo from \"../images/PullLogo.png\";\nimport legsLogo from \"../images/LegsLogo.png\";\nimport NavBar from '../NavBar';\n\n\nfunction WeightsPage()\n{\n    return (\n        <div >\n            <NavBar/>\n            <h1>Weight Training</h1>\n            <div class=\"block--styling\">\n                <h3>Push</h3>\n                    <img src={pushLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>\n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div class=\"block--styling\">\n                <h3>Pull</h3>\n                    <img src={pullLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>                    \n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div class=\"block--styling\">\n                <h3>Legs</h3>\n                    <img src={legsLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>                  \n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n\n        <div>\n        </div>\n            <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n        </div>\n    );\n}\n/*<label style={{textAlign: \"left\"}}>\n            <input type=\"text\" name=\"Push\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"center\"}}>\n            <input type=\"text\" name=\"Pull\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"right\"}}>\n            <input type=\"text\" name=\"Leg\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />*/\nexport default WeightsPage;","import React from 'react';\nimport './App.css';\nimport HomePage from './Pages/HomePage';\nimport LoginPage from './Pages/LoginPage';\nimport RegisterPage from './Pages/LoginPage';\nimport SummaryPage from './Pages/SummaryPage';\nimport CalendarPage from './Pages/CalendarPage';\nimport WeightsPage from './Pages/WeightsPage';\nimport {Route, Routes} from 'react-router-dom';\n\nfunction App() {\n\n  // note that the Route changes what's being rendered, it doesn't actually load a new page\n  // we might want to have a folder with all of the pages inside\n  return (\n    <div className=\"App\">\n        <div style={{width: \"100%\"}}>\n          <Routes>\n            <Route path=\"/\" exact element={<HomePage />}/>\n            <Route path=\"/login\" exact element={<LoginPage />}/>\n            <Route path=\"/register\" element={<RegisterPage />} />\n            <Route path=\"/summary\" element={<SummaryPage />} />\n            <Route path=\"/calendar\" element={<CalendarPage />} />\n            <Route path=\"/weights\" element={<WeightsPage />} />\n          </Routes>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/LukeSandsor/GitFit-App\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Link to GitHub Repo\n        </a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}