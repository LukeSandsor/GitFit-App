{"version":3,"sources":["dumbell.svg","images/home_icon.svg","images/calendar_icon.svg","images/dumbbell.png","images/PushLogo.png","images/PullLogo.png","images/LegsLogo.png","Pages/HomePage.js","Pages/LoginPage.js","Pages/RegisterPage.js","NavBar.js","Pages/SummaryPage.js","CalendarObject/Tile/Tile.jsx","context/calendar-date.context.js","CalendarObject/Calendar.js","Pages/CalendarPage.js","Pages/WeightsPage.js","Pages/ErrorPage.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","react_default","a","createElement","src","logo","className","alt","react_router_dom","to","LoginPage","RegisterPage","NavBar","title","homeIcon","calendarIcon","weightIcon","monthStrs","SummaryPage","_useState","useState","_useState2","Object","slicedToArray","adviceObject","setAdvice","_getAdvice","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","abrupt","data","t0","stop","apply","this","arguments","useEffect","getAdvice","then","result","id","src_NavBar","concat","Date","getMonth","getDate","getFullYear","role","aria-label","href","source","advice","Tile","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","row","col","mood","isNotActive","num","onMouseDown","extraClassName","Component","CalendarDateInfoContext","createContext","dailyInfo","updateDay","NUM_COLS","NUM_ROWS","daysOfWeek","CalendarHeader","dayRow","map","value","index","key","Calendar","currentMonth","setCurrentMonth","_useState3","_useState4","currentYear","setCurrentYear","_useState5","_useState6","selectedTile","setSelectedTile","_useState7","_useState8","calendarBody","setCalendar","gridOfInfo","useContext","UpdateCalendar","incrementMonth","numYears","Math","floor","abs","newMonthVal","undefined","handleMouseDown","tileObject","document","getElementById","classList","length","getInfo","loadCalendarBodyInfo","dateData","newInfoRow","currentMood","currentDay","firstDayOfWeekIndex","getDay","active","finished","grid","currentRow","currentTile","defMood","defNum","r","c","push","initializeGrid","newInfoGrid","newCalendarBody","rowIndex","tile","tileIndex","currentInfo","calLost","calCons","weight","numWork","numStep","Tile_Tile_Tile","setDate","dateText","thisDateData","dateString","objectSpread","exampleDateData","onClick","CalendarPage","setDailyInfo","calendar_date_context","Provider","info","CalendarObject_Calendar","style","marginBottom","WeightsPage","pushLogo","verticalAlign","maxWidth","textAlign","color","fontSize","type","name","pullLogo","legsLogo","ErrorPage","App","width","react_router","path","exact","element","Pages_HomePage","Pages_LoginPage","Pages_RegisterPage","Pages_SummaryPage","Pages_CalendarPage","Pages_WeightsPage","Pages_ErrorPage","target","rel","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ff1d978d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dumbell.2e6e928c.svg\";","module.exports = __webpack_public_path__ + \"static/media/home_icon.293e730f.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar_icon.bcdfe888.svg\";","module.exports = __webpack_public_path__ + \"static/media/dumbbell.87d71c09.png\";","module.exports = __webpack_public_path__ + \"static/media/PushLogo.dddcf89c.png\";","module.exports = __webpack_public_path__ + \"static/media/PullLogo.26e15e4f.png\";","module.exports = __webpack_public_path__ + \"static/media/LegsLogo.047d97b4.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../dumbell.svg';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h3>GitFit: Home</h3>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div>\n        <li><Link to=\"/login\">Login</Link></li>\n        <li><Link to=\"/register\">Register</Link></li>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction LoginPage() {\n  // we probably want to redirect logged in users to summary page\n  // leave summary link in for now\n  return (\n    <div>\n      <h3>GitFit: Login</h3>\n      <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\n\nfunction RegisterPage() {\n  return (\n    <div>\n      <h3>GitFit: Register</h3>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NavBar.css';\nimport homeIcon from './images/home_icon.svg';\nimport calendarIcon from './images/calendar_icon.svg';\nimport weightIcon from './images/dumbbell.png';\n\n/* Vertical NavBar using fixed positioning in CSS\n  This will be an object that provides links to all of the other user pages\n\n  Navbar should be a list of nested links\n  The title attribute of links shows text when you hover over it\n*/\nfunction NavBar() {\n  return (\n    <div className='navbar'>\n      <ul>\n        <li>\n          <Link to=\"/summary\" title=\"Summary\">\n            <img src={homeIcon} className=\"navbar-icon\" alt=\"Home\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/calendar\" title=\"Calendar\">\n            <img src={calendarIcon} className=\"navbar-icon\" alt=\"Calendar\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/weights\" title=\"Weight Training\">\n            <img src={weightIcon} className=\"navbar-icon\" alt=\"Weight\" />\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport NavBar from '../NavBar';\nimport './SummaryPage.css';\n\nconst monthStrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nfunction SummaryPage() {\n  const [adviceObject, setAdvice] = useState({});\n\n  async function getAdvice() {\n    try {\n      // returns an array of size 1 with advice object\n      const response = await axios.get('https://gitfit.lucasreyna.me/advice');\n      return response.data[0];\n    } catch (error) {\n      // possible do something with no advice\n      // console.log(error);\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    getAdvice().then((result) => {\n      if (result) {\n        setAdvice(result);\n      }\n    });\n  }, []); // only load on render\n\n  return (\n    <div id=\"summary-page\" className=\"user-page\">\n      <NavBar/>\n      <h3>GitFit: Summary</h3>\n      <h3 id='date-block'>{`${monthStrs[(new Date()).getMonth()]} ${(new Date()).getDate()}, ${(new Date()).getFullYear()}`}</h3>\n      <div id=\"mood-picker\">\n        <p>Pick a mood that describes your day:</p>\n        <ul>\n          <li><span role=\"img\" aria-label=\"Angry\">😡</span></li>\n          <li><span role=\"img\" aria-label=\"Cry\">😢</span></li>\n          <li><span role=\"img\" aria-label=\"Sick\">🤒</span></li>\n          <li><span role=\"img\" aria-label=\"Neutral\">😐</span></li>\n          <li><span role=\"img\" aria-label=\"Happy\">🙂</span></li>\n          <li><span role=\"img\" aria-label=\"Ecstatic\">🤩</span></li>\n        </ul>\n      </div>\n      <div id=\"adviceDisplay\">\n            <a href={adviceObject.source}>{adviceObject.source}</a>\n            <div id=\"advice-text-block\">\n              <span>&#34;{adviceObject.advice}&#34;</span>\n            </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SummaryPage;\n","import React, { Component } from 'react';\nimport './Tile.css';\n\nexport default class Tile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    // Determine if properties are true, in order to add it to class name\n    const {\n      row,\n      col,\n      mood,\n      isNotActive,\n      num,\n      onMouseDown,\n    } = this.props;\n    const extraClassName = isNotActive ? 'inactive-tile' : '';\n\n    return (\n      <div\n        id={`tile-${row}-${col}`}\n        className={`tile ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}>\n          <div className='tile-num'>\n            <span>{num}</span>\n          </div>\n          <div className='tile-mood'>\n            <span >{mood}</span>\n          </div>\n      </div>\n    );\n  }\n}\n","import { createContext } from 'react';\n\nconst CalendarDateInfoContext = createContext({\n  dailyInfo: {},\n  updateDay: () => {},\n});\n\nexport default CalendarDateInfoContext;\n","import React, { useState, useEffect, useContext } from 'react';\nimport './Calendar.css';\nimport Tile from './Tile/Tile.jsx';\nimport exampleDateData from './ExampleCalendarData.json'; // For testing purposes\nimport CalendarDateInfoContext from '../context/calendar-date.context';\n\nconst NUM_COLS = 7; // seven days in a week\nconst NUM_ROWS = 6; // at most 6 weeks to display\nconst daysOfWeek = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\nconst monthStrs = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n// sets up the days of the week in table format\nfunction CalendarHeader() {\n  const dayRow = daysOfWeek.map((value, index) => (<th key={index} className=\"day-week-text\">{value}</th>));\n  return (\n      <thead>\n        <tr>\n          {dayRow}\n        </tr>\n      </thead>\n  );\n}\n\nfunction Calendar() {\n  const [currentMonth, setCurrentMonth] = useState((new Date()).getMonth());\n  const [currentYear, setCurrentYear] = useState((new Date()).getFullYear());\n  const [selectedTile, setSelectedTile] = useState();\n  const [calendarBody, setCalendar] = useState();\n  let gridOfInfo = []; // makes grid accessible in other functions\n\n  const { updateDay } = useContext(CalendarDateInfoContext);\n\n  function UpdateCalendar(incrementMonth) {\n    // in case value > 12\n    const numYears = Math.floor(Math.abs(incrementMonth / 12)) + 1;\n    const newMonthVal = currentMonth + incrementMonth;\n\n    if (newMonthVal < 0) {\n      // needed for positive modulo result\n      setCurrentMonth(((newMonthVal % 12) + 12) % 12);\n      setCurrentYear(currentYear - numYears);\n    } else if (newMonthVal > 11) {\n      setCurrentMonth(newMonthVal % 12);\n      setCurrentYear(currentYear + numYears);\n    } else {\n      setCurrentMonth(newMonthVal);\n    }\n\n    // reset the currently selected tile\n    if (selectedTile) selectedTile.className = 'tile ';\n    setSelectedTile(undefined);\n    updateDay({}); // reset Daily Breakdown info when switching\n  }\n\n  function handleMouseDown(row, col) {\n    const tileObject = document.getElementById(`tile-${row}-${col}`);\n\n    // make sure tile is active and not already selected\n    // set tile Object as selected and change its class\n    if (tileObject.classList.length === 1) {\n      // change previous tile to a default active tile\n      // make sure it's not undefined\n      if (selectedTile) selectedTile.className = 'tile ';\n      setSelectedTile(tileObject);\n      tileObject.className += 'selected-tile';\n\n      // set daily info\n      // console.log(gridOfInfo);\n      const getInfo = gridOfInfo[row][col];\n      // console.log(getInfo);\n      updateDay(getInfo); // this will set the context for calenderPage\n    }\n  }\n\n  // Create a matrix of row length and col length\n  function initializeGrid() {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row += 1) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLS; col += 1) {\n        const currentTile = {\n          row, // row value, set later\n          col, // col value, set later\n          defMood: '', // mood value\n          defNum: '', // num value of tile, set later\n          onMouseDown: (r, c) => handleMouseDown(r, c),\n          isNotActive: true, // set all tiles to default\n        };\n        currentRow.push(currentTile);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  function loadCalendarBodyInfo(dateData) {\n    let currentMood = '';\n    const currentDay = new Date(currentYear, currentMonth, 1);\n\n    const firstDayOfWeekIndex = currentDay.getDay(); // 0 to 6, sunday is first\n    let active = false;\n    let finished = false;\n\n    const grid = initializeGrid();\n    const newInfoGrid = [];\n    let newInfoRow;\n    const newCalendarBody = grid.map((row, rowIndex) => {\n      // skip the first iteration, newInfoRow is undefined\n      if (newInfoRow) {\n        newInfoGrid.push(newInfoRow);\n      }\n      newInfoRow = [];\n\n      // return from the column map, whole row\n      return (\n        <tbody key={rowIndex}>\n          <tr>\n            {row.map((tile, tileIndex) => {\n              let currentInfo = { // set all info for Tile\n                calLost: 'N/A',\n                calCons: 'N/A',\n                weight: 'N/A',\n                numWork: 'N/A',\n                numStep: 'N/A',\n                mood: 'N/A',\n              };\n\n              // return from the row map, single Tile\n              const { onMouseDown, defMood, defNum } = tile; // is from the currentTile Object\n\n              // wait until proper day of the week\n              if (!active) {\n                // check day of the week before index\n                if (firstDayOfWeekIndex === tileIndex && !finished) {\n                  // needed to offset currentDay to 1\n                  currentDay.setDate(currentDay.getDate() - 1);\n                  active = true;\n                } else {\n                  newInfoRow.push({}); // won't be accessed anyway\n\n                  // return blank tile\n                  return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={defMood}\n                        num={defNum}\n                        isNotActive={true}\n                        ></Tile>\n                    </td>\n                  );\n                }\n              }\n\n              if (active) {\n                currentDay.setDate(currentDay.getDate() + 1);\n                if (currentMonth === currentDay.getMonth()) {\n                  const dateText = `${monthStrs[currentMonth]} ${currentDay.getDate()}, ${currentYear}`;\n                  const thisDateData = dateData[currentYear][currentMonth][currentDay.getDate()];\n                  currentInfo.dateString = dateText;\n\n                  // check if this day has a mood loggged\n                  if (thisDateData !== undefined) {\n                    currentMood = thisDateData.mood; // may need to check if undefined\n\n                    // merge the two objects, if data exists it'll overwrite the 'N/A'\n                    currentInfo = { ...currentInfo, ...thisDateData };\n                    newInfoRow.push(currentInfo);\n                  } else {\n                    currentMood = '';\n                    newInfoRow.push(currentInfo); // empty info\n                  }\n\n                  return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={currentMood}\n                        num={currentDay.getDate()}\n                        isNotActive={false}\n                        ></Tile>\n                      </td>\n                  );\n                }\n\n                newInfoRow.push({});\n                finished = true;\n                active = false;\n                return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={defMood}\n                        num={defNum}\n                        isNotActive={true}\n                        ></Tile>\n                    </td>\n                );\n              }\n              // return default to suppres warnings\n              return <Tile key=\"invalid\"/>;\n            })\n            }\n          </tr>\n        </tbody>\n      );\n    });\n    newInfoGrid.push(newInfoRow); // must push last row\n    gridOfInfo = newInfoGrid; // set component variable to newGrid\n\n    return newCalendarBody;\n  }\n\n  // runs on first render, and any time month or selected tile is changed\n  useEffect(() => {\n    setCalendar(loadCalendarBodyInfo(exampleDateData));\n  }, [currentMonth, selectedTile]);\n\n  return (\n    <div className='calendar'>\n        <div className=\"calendar-top\">\n          <button className=\"arrow-button\" onClick={() => UpdateCalendar(-1)}>&#8678;</button>\n          <span id=\"month-year-text\">{monthStrs[currentMonth]} {currentYear}</span>\n          <button className=\"arrow-button\" onClick={() => UpdateCalendar(1)}>&#8680;</button>\n        </div>\n        <table>\n            <CalendarHeader />\n            {calendarBody}\n        </table>\n    </div>\n  );\n}\n\nexport default Calendar;\n","import React, { useState } from 'react';\nimport Calendar from '../CalendarObject/Calendar';\nimport NavBar from '../NavBar';\nimport './CalendarPage.css';\nimport CalendarDateInfoContext from '../context/calendar-date.context';\n\nfunction CalendarPage() {\n  const [dailyInfo, setDailyInfo] = useState({\n    dateString: '',\n    calLost: '',\n    calCons: '',\n    weight: '',\n    numWork: '',\n    numStep: '',\n    mood: '',\n  });\n\n  const updateDay = (info) => setDailyInfo(info);\n\n  return (\n    <div>\n      <NavBar />\n      <h3>GitFit: Calendar</h3>\n      <div id=\"page-contents\">\n        <CalendarDateInfoContext.Provider value={{ dailyInfo, updateDay }}>\n          <Calendar />\n        </CalendarDateInfoContext.Provider>\n        <div id=\"day-info-block\">\n          <div id=\"day-title\">\n            <span>Select a date to see your fitness information</span>\n            <p>{dailyInfo.dateString}</p>\n          </div>\n          <h3 style={{ marginBottom: '0' }}>Daily Breakdown</h3>\n          <div id=\"daily-breakdown\">\n            <p>Calories Lost: {dailyInfo.calLost}</p>\n            <p>Calories Consumed: {dailyInfo.calCons}</p>\n            <p>Weight: {dailyInfo.weight}</p><br></br>\n            <p># of Workouts: {dailyInfo.numWork}</p>\n            <p># of Steps Taken: {dailyInfo.numStep}</p>\n            <p>Mood for the Day: {dailyInfo.mood}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CalendarPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './WeightsPage.css';\nimport pushLogo from '../images/PushLogo.png';\nimport pullLogo from '../images/PullLogo.png';\nimport legsLogo from '../images/LegsLogo.png';\nimport NavBar from '../NavBar';\n\nfunction WeightsPage() {\n  return (\n        <div >\n            <NavBar/>\n            <h1>Weight Training</h1>\n            <div className=\"block--styling\">\n                <h3>Push</h3>\n                    <img src={pushLogo} alt=\"PushImage\" style={{ verticalAlign: 'top', maxWidth: 200 }}></img>\n                    <br></br>\n                    <label style={{ textAlign: 'left' }}>\n                        <text style={{ color: 'grey', fontSize: 40 }}>Enter Weight</text>\n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div className=\"block--styling\">\n                <h3>Pull</h3>\n                    <img src={pullLogo} alt=\"PushImage\" style={{ verticalAlign: 'top', maxWidth: 200 }}></img>\n                    <br></br>\n                    <label style={{ textAlign: 'left' }}>\n                        <text style={{ color: 'grey', fontSize: 40 }}>Enter Weight</text>\n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div className=\"block--styling\">\n                <h3>Legs</h3>\n                    <img src={legsLogo} alt=\"PushImage\" style={{ verticalAlign: 'top', maxWidth: 200 }}></img>\n                    <br></br>\n                    <label style={{ textAlign: 'left' }}>\n                        <text style={{ color: 'grey', fontSize: 40 }}>Enter Weight</text>\n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n\n        <div>\n        </div>\n            <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n        </div>\n  );\n}\n/* <label style={{textAlign: \"left\"}}>\n            <input type=\"text\" name=\"Push\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"center\"}}>\n            <input type=\"text\" name=\"Pull\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"right\"}}>\n            <input type=\"text\" name=\"Leg\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" /> */\nexport default WeightsPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// this page should show up if there is something wrong with url\nfunction ErrorPage() {\n  return (\n    <div>\n      <h3>GitFit: ErrorPage</h3>\n      <Link to=\"/\" title=\"Home Page\">Link to go back to HomePage</Link>\n    </div>\n  );\n}\n\nexport default ErrorPage;\n","import React from 'react';\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom';\nimport HomePage from './Pages/HomePage';\nimport LoginPage from './Pages/LoginPage';\nimport RegisterPage from './Pages/RegisterPage';\nimport SummaryPage from './Pages/SummaryPage';\nimport CalendarPage from './Pages/CalendarPage';\nimport WeightsPage from './Pages/WeightsPage';\nimport ErrorPage from './Pages/ErrorPage';\n\nfunction App() {\n  // note that the Route changes what's being rendered, it doesn't actually load a new page\n  // we might want to have a folder with all of the pages inside\n  return (\n    <div className=\"App\">\n        <div style={{ width: '100%' }}>\n          <Routes>\n            <Route path=\"/\" exact element={<HomePage />}/>\n            <Route path=\"/login\" element={<LoginPage />}/>\n            <Route path=\"/register\" element={<RegisterPage />} />\n            <Route path=\"/summary\" element={<SummaryPage />} />\n            <Route path=\"/calendar\" element={<CalendarPage />} />\n            <Route path=\"/weights\" element={<WeightsPage />} />\n            <Route path=\"*\" element={<ErrorPage />}/>\n          </Routes>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/LukeSandsor/GitFit-App\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Link to GitHub Repo\n        </a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}