{"version":3,"sources":["dumbell.svg","images/home_icon.svg","images/calendar_icon.svg","images/dumbbell.png","images/PushLogo.png","images/PullLogo.png","images/LegsLogo.png","Pages/HomePage.js","Pages/LoginPage.js","NavBar.js","Pages/SummaryPage.js","CalendarObject/Tile/Tile.jsx","context/calendar-date.context.js","CalendarObject/Calendar.js","Pages/CalendarPage.js","Pages/WeightsPage.js","Pages/ErrorPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","react_default","a","createElement","src","logo","className","alt","react_router_dom","to","LoginPage","NavBar","title","homeIcon","calendarIcon","weightIcon","monthStrs","SummaryPage","_useState","useState","_useState2","Object","slicedToArray","adviceObject","setAdvice","_getAdvice","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","abrupt","data","t0","console","log","stop","apply","this","arguments","useEffect","getAdvice","then","result","id","src_NavBar","concat","Date","getMonth","getDate","getFullYear","role","aria-label","href","source","advice","Tile","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","row","col","mood","isNotActive","num","onMouseDown","extraClassName","Component","CalendarDateInfoContext","createContext","dailyInfo","updateDay","NUM_COLS","NUM_ROWS","daysOfWeek","CalendarHeader","dayRow","map","value","index","key","Calendar","currentMonth","setCurrentMonth","_useState3","_useState4","currentYear","setCurrentYear","_useState5","_useState6","selectedTile","setSelectedTile","_useState7","_useState8","calendarBody","setCalendar","gridOfInfo","useContext","UpdateCalendar","incrementMonth","numYears","Math","floor","abs","newMonthVal","undefined","handleMouseDown","tileObject","document","getElementById","classList","length","getInfo","dateData","currentMood","currentDay","firstDayOfWeekIndex","getDay","active","finished","grid","currentRow","currentTile","def_mood","def_num","push","initializeGrid","newInfoGrid","newInfoRow","rowIndex","tile","tileIndex","currentInfo","calLost","calCons","weight","numWork","numStep","Tile_Tile_Tile","setDate","dateText","thisDateData","dateString","objectSpread","loadCalendarBodyInfo","exampleDateData","onClick","CalendarPage","setDailyInfo","calendar_date_context","Provider","CalendarObject_Calendar","style","marginBottom","WeightsPage","class","pushLogo","verticalAlign","maxWidth","textAlign","color","fontSize","type","name","pullLogo","legsLogo","ErrorPage","App","width","react_router","path","exact","element","Pages_HomePage","Pages_LoginPage","Pages_SummaryPage","Pages_CalendarPage","Pages_WeightsPage","Pages_ErrorPage","target","rel","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,m4KCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oWCmBzBC,MAff,WAGE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,UAAT,UACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,aAAT,gBCEGC,MAZf,WAIE,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAT,8IC4BSE,MAzBf,WAEE,OACEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAWG,MAAM,WACxBX,EAAAC,EAAAC,cAAA,OAAKC,IAAKS,IAAUP,UAAU,cAAcC,IAAI,WAGpDN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAYG,MAAM,YACzBX,EAAAC,EAAAC,cAAA,OAAKC,IAAKU,IAAcR,UAAU,cAAcC,IAAI,eAGxDN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAWG,MAAM,mBACxBX,EAAAC,EAAAC,cAAA,OAAKC,IAAKW,IAAYT,UAAU,cAAcC,IAAI,gBCzBxDS,SAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAoDjFC,MAlDf,WACA,IAAAC,EACoCC,mBAAS,IAD7CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACSK,EADTH,EAAA,GACuBI,EADvBJ,EAAA,YAAAK,IAAA,OAAAA,EAAAJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAzB,EAAA0B,KAUE,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAzB,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG2BC,IAAMC,IAAI,uCAHrC,cAGUN,EAHVE,EAAAK,KAAAL,EAAAM,OAAA,SAIWR,EAASS,KAAK,IAJzB,cAAAP,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAQIS,QAAQC,IAARV,EAAAQ,IARJR,EAAAM,OAAA,UASW,GATX,yBAAAN,EAAAW,SAAAd,EAAA,kBAVFe,MAAAC,KAAAC,WAuBE,OApBAC,oBAAU,YAHZ,kBAAAtB,EAAAmB,MAAAC,KAAAC,YAIIE,GAAYC,KAAM,SAAAC,GACZA,GACF1B,EAAU0B,MAEb,IAgBDjD,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,eAAe7C,UAAU,aAC/BL,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,MAAIgD,GAAG,cAAP,GAAAE,OAAwBrC,GAAW,IAAIsC,MAAQC,YAA/C,KAAAF,QAA+D,IAAIC,MAAQE,UAA3E,MAAAH,QAA0F,IAAIC,MAAQG,gBACtGxD,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,eACNlD,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,SAA5B,iBACJ1D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,OAA5B,iBACJ1D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,QAA5B,iBACJ1D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,WAA5B,iBACJ1D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,SAA5B,iBACJ1D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMuD,KAAK,MAAMC,aAAW,YAA5B,mBAGR1D,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,iBACFlD,EAAAC,EAAAC,cAAA,KAAGyD,KAAMrC,EAAasC,QAAStC,EAAasC,QAC5C5D,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,qBACNlD,EAAAC,EAAAC,cAAA,gBAAQoB,EAAauC,OAArB,iEC/COC,qBAClB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA5C,OAAA6C,EAAA,EAAA7C,CAAAwB,KAAAkB,IAChBE,EAAA5C,OAAA8C,EAAA,EAAA9C,CAAAwB,KAAAxB,OAAA+C,EAAA,EAAA/C,CAAA0C,GAAAM,KAAAxB,KAAMmB,KACDM,MAAQ,GAFGL,wEAKV,IAAAM,EASF1B,KAAKmB,MANPQ,EAHID,EAGJC,IACAC,EAJIF,EAIJE,IACAC,EALIH,EAKJG,KACAC,EANIJ,EAMJI,YACAC,EAPIL,EAOJK,IACAC,EARIN,EAQJM,YAEIC,EAAiBH,EAAc,gBAAkB,GAEvD,OACE1E,EAAAC,EAAAC,cAAA,OACEgD,GAAE,QAAAE,OAAUmB,EAAV,KAAAnB,OAAiBoB,GACnBnE,UAAS,QAAA+C,OAAUyB,GACnBD,YAAa,kBAAMA,EAAYL,EAAKC,KAClCxE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,YAAOyE,IAET3E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,YAAQuE,YA3BYK,sBCInBC,EALiBC,wBAAc,CAC5CC,UAAW,GACXC,UAAW,eCEPC,EAAW,EACXC,EAAW,EACXC,EAAa,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAClDtE,EAAY,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGjI,SAASuE,IACP,IAAMC,EAASF,EAAWG,IAAI,SAACC,EAAOC,GAClC,OAAQ1F,EAAAC,EAAAC,cAAA,MAAIyF,IAAKD,EAAOrF,UAAU,iBAAiBoF,KAGrD,OACEzF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGqF,IA0OIK,MApOf,WAAoB,IAAA3E,EACsBC,oBAAU,IAAImC,MAAQC,YAD5CnC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX4E,EADW1E,EAAA,GACG2E,EADH3E,EAAA,GAAA4E,EAEoB7E,oBAAU,IAAImC,MAAQG,eAF1CwC,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAEXE,EAFWD,EAAA,GAEEE,EAFFF,EAAA,GAAAG,EAGsBjF,qBAHtBkF,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GAGXE,EAHWD,EAAA,GAGGE,EAHHF,EAAA,GAAAG,EAIkBrF,qBAJlBsF,EAAApF,OAAAC,EAAA,EAAAD,CAAAmF,EAAA,GAIXE,EAJWD,EAAA,GAIGE,EAJHF,EAAA,GAKdG,EAAa,GAETzB,EAAc0B,qBAAW7B,GAAzBG,UAOR,SAAS2B,EAAeC,GAEtB,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,IAAIJ,EAAiB,KAAO,EACvDK,EAActB,EAAeiB,EAE/BK,EAAc,GAEhBrB,GAAkBqB,EAAc,GAAM,IAAM,IAC5CjB,EAAeD,EAAcc,IAEtBI,EAAc,IACrBrB,EAAgBqB,EAAc,IAC9BjB,EAAeD,EAAcc,IAG7BjB,EAAgBqB,GAIdd,IACAA,EAAahG,UAAY,SAC7BiG,OAAgBc,GAChBlC,EAAU,IAGZ,SAASmC,EAAgB9C,EAAKC,GAC5B,IAAI8C,EAAaC,SAASC,eAAT,QAAApE,OAAgCmB,EAAhC,KAAAnB,OAAuCoB,IAIxD,GAAoC,IAAhC8C,EAAWG,UAAUC,OAAc,CAGjCrB,IACFA,EAAahG,UAAY,SAC3BiG,EAAgBgB,GAChBA,EAAWjH,WAAa,gBAGxBmC,QAAQC,IAAIkE,GACZ,IAAIgB,EAAUhB,EAAWpC,GAAKC,GAC9BhC,QAAQC,IAAIkF,GACZzC,EAAUyC,IA6Jd,OA3MA7E,oBAAU,WACR4D,EAuEF,SAA8BkB,GAC5B,IAAIC,EAAc,GACdC,EAAa,IAAIzE,KAAK4C,EAAaJ,EAAc,GAEjDkC,EAAsBD,EAAWE,SACjCC,GAAS,EACTC,GAAW,EAETC,EA7BR,WAEE,IADA,IAAMA,EAAO,GACJ5D,EAAM,EAAGA,EAAMa,EAAUb,IAAO,CAEvC,IADA,IAAM6D,EAAa,GACV5D,EAAM,EAAGA,EAAMW,EAAUX,IAAO,CACrC,IAAM6D,EAAc,CAClB9D,MACAC,MACA8D,SAAU,GACVC,QAAS,GACT3D,YAAa,SAACL,EAAKC,GAAN,OAAc6C,EAAgB9C,EAAKC,IAChDE,aAAa,GAEf0D,EAAWI,KAAKH,GAEpBF,EAAKK,KAAKJ,GAGZ,OAAOD,EAWMM,GACTC,EAAc,GACdC,OAAavB,EACXX,EAAe0B,EAAK3C,IAAI,SAACjB,EAAKqE,GAQlC,OANID,GACFD,EAAYF,KAAKG,GAEnBA,EAAa,GAIX3I,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIyF,IAAKiD,GACNrE,EAAIiB,IAAI,SAACqD,EAAMC,GACd,IAAIC,EAAc,CAChBC,QAAS,MACTC,QAAS,MACTC,OAAQ,MACRC,QAAS,MACTC,QAAS,MACT3E,KAAM,OAIDG,EAAkCiE,EAAlCjE,YAAa0D,EAAqBO,EAArBP,SAAUC,EAAWM,EAAXN,QAG9B,IAAKN,EAAQ,CAEX,GAAIF,IAAwBe,GAAcZ,EAUxC,OAHAS,EAAWH,KAAK,IAIdxI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmJ,EAAD,CACE1D,IAAKmD,EACLlE,YAAaA,EACbL,IAAKqE,EACLpE,IAAKsE,EACLrE,KAAM6D,EACN3D,IAAK4D,EACL7D,aAAa,KAhBnBoD,EAAWwB,QAAQxB,EAAWvE,UAAY,GAC1C0E,GAAS,EAsBb,GAAIA,EAAQ,CAEV,GADAH,EAAWwB,QAAQxB,EAAWvE,UAAY,GACtCsC,IAAiBiC,EAAWxE,WAAY,CAC1C,IAAMiG,EAAQ,GAAAnG,OAAMrC,EAAU8E,GAAhB,KAAAzC,OAAiC0E,EAAWvE,UAA5C,MAAAH,OAA0D6C,GAClEuD,EAAe5B,EAAS3B,GAAaJ,GAAciC,EAAWvE,WAgBpE,OAfAwF,EAAYU,WAAaF,OAGJnC,IAAjBoC,GACF3B,EAAc2B,EAAa/E,KAG3BsE,EAAW3H,OAAAsI,EAAA,EAAAtI,CAAA,GAAO2H,EAAgBS,GAClCb,EAAWH,KAAKO,KAGhBlB,EAAc,GACdc,EAAWH,KAAKO,IAIhB/I,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmJ,EAAD,CACE1D,IAAKmD,EACLlE,YAAaA,EACbL,IAAKqE,EACLpE,IAAKsE,EACLrE,KAAMoD,EACNlD,IAAKmD,EAAWvE,UAChBmB,aAAa,KAUnB,OAHAiE,EAAWH,KAAK,IAChBN,GAAW,EACXD,GAAS,EAEPjI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmJ,EAAD,CACE1D,IAAKmD,EACLlE,YAAaA,EACbL,IAAKqE,EACLpE,IAAKsE,EACLrE,KAAM6D,EACN3D,IAAK4D,EACL7D,aAAa,KAOvB,OAAO1E,EAAAC,EAAAC,cAACmJ,EAAD,YASjB,OAHAX,EAAYF,KAAKG,GACjBhC,EAAa+B,EAENjC,EAvMKkD,CAAqBC,KAChC,CAAC/D,EAAcQ,IA0MhBrG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,eAAewJ,QAAS,kBAAMhD,GAAgB,KAAhE,UACA7G,EAAAC,EAAAC,cAAA,QAAMgD,GAAG,mBAAmBnC,EAAU8E,GAAtC,IAAsDI,GACtDjG,EAAAC,EAAAC,cAAA,UAAQG,UAAU,eAAewJ,QAAS,kBAAMhD,EAAe,KAA/D,WAEF7G,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAACoF,EAAD,MACCmB,WCxMEqD,MA1Cf,WACA,IAAA7I,EACoCC,mBAAS,CACzCuI,WAAY,GACZT,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,QAAS,GACTC,QAAS,GACT3E,KAAM,KARVtD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACSgE,EADT9D,EAAA,GACoB4I,EADpB5I,EAAA,GAaE,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,iBACNlD,EAAAC,EAAAC,cAAC8J,EAAwBC,SAAzB,CAAkCxE,MAAO,CAACR,YAAWC,UAPzC,SAACD,GAAD,OAAe8E,EAAa9E,MAQtCjF,EAAAC,EAAAC,cAACgK,EAAD,OAEFlK,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,kBACNlD,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,aACNlD,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,SAAI+E,EAAUwE,aAEhBzJ,EAAAC,EAAAC,cAAA,MAAIiK,MAAO,CAACC,aAAc,MAA1B,mBACApK,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,mBACNlD,EAAAC,EAAAC,cAAA,2BAAmB+E,EAAU+D,SAC7BhJ,EAAAC,EAAAC,cAAA,+BAAuB+E,EAAUgE,SACjCjJ,EAAAC,EAAAC,cAAA,oBAAY+E,EAAUiE,QAAWlJ,EAAAC,EAAAC,cAAA,WACjCF,EAAAC,EAAAC,cAAA,2BAAmB+E,EAAUkE,SAC7BnJ,EAAAC,EAAAC,cAAA,8BAAsB+E,EAAUmE,SAChCpJ,EAAAC,EAAAC,cAAA,8BAAsB+E,EAAUR,sECwB7B4F,MAvDf,WAEI,OACIrK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,OAAKoK,MAAM,kBACPtK,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKoK,IAAUjK,IAAI,YAAY6J,MAAO,CAACK,cAAe,MAAOC,SAAU,OAC5EzK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOiK,MAAO,CAACO,UAAW,SACtB1K,EAAAC,EAAAC,cAAA,QAAMiK,MAAO,CAACQ,MAAO,OAAQC,SAAU,KAAvC,gBACJ5K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,OAAOC,KAAK,UAExB9K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,SAASpF,MAAM,YAEnCzF,EAAAC,EAAAC,cAAA,OAAKoK,MAAM,kBACPtK,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAK4K,IAAUzK,IAAI,YAAY6J,MAAO,CAACK,cAAe,MAAOC,SAAU,OAC5EzK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOiK,MAAO,CAACO,UAAW,SACtB1K,EAAAC,EAAAC,cAAA,QAAMiK,MAAO,CAACQ,MAAO,OAAQC,SAAU,KAAvC,gBACJ5K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,OAAOC,KAAK,UAExB9K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,SAASpF,MAAM,YAEnCzF,EAAAC,EAAAC,cAAA,OAAKoK,MAAM,kBACPtK,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAK6K,IAAU1K,IAAI,YAAY6J,MAAO,CAACK,cAAe,MAAOC,SAAU,OAC5EzK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOiK,MAAO,CAACO,UAAW,SACtB1K,EAAAC,EAAAC,cAAA,QAAMiK,MAAO,CAACQ,MAAO,OAAQC,SAAU,KAAvC,gBACJ5K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,OAAOC,KAAK,UAExB9K,EAAAC,EAAAC,cAAA,SAAO2K,KAAK,SAASpF,MAAM,YAGvCzF,EAAAC,EAAAC,cAAA,YAEIF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAT,mCCjCGyK,MAXf,WAGE,OACEjL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIG,MAAM,aAAnB,wCC8BSuK,MA7Bf,WAIE,OACElL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,OAAKiK,MAAO,CAACgB,MAAO,SAClBnL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,KACEpL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,QAASvL,EAAAC,EAAAC,cAACsL,EAAD,QAC/BxL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,SAASE,QAASvL,EAAAC,EAAAC,cAACuL,EAAD,QAC9BzL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,YAAYE,QAASvL,EAAAC,EAAAC,cAACuL,EAAD,QACjCzL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,WAAWE,QAASvL,EAAAC,EAAAC,cAACwL,EAAD,QAChC1L,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,YAAYE,QAASvL,EAAAC,EAAAC,cAACyL,EAAD,QACjC3L,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,WAAWE,QAASvL,EAAAC,EAAAC,cAAC0L,EAAD,QAChC5L,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOC,KAAK,IAAIE,QAASvL,EAAAC,EAAAC,cAAC2L,EAAD,UAG7B7L,EAAAC,EAAAC,cAAA,KACEG,UAAU,WACVsD,KAAK,4CACLmI,OAAO,SACPC,IAAI,uBAJN,yBChBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCrM,EAAAsM,EAAA,GAAAnJ,KAAAnD,EAAAuM,KAAA,UAAqBpJ,KAAK,SAAAqJ,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCADU,IAASC,WAAWrF,SAASC,eAAe,SACpDqF,OACH7M,EAAAC,EAAAC,cAACF,EAAAC,EAAM6M,WAAP,KACE9M,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAC6M,EAAD,SAQNf","file":"static/js/main.22c65ac2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dumbell.2e6e928c.svg\";","module.exports = __webpack_public_path__ + \"static/media/home_icon.293e730f.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar_icon.bcdfe888.svg\";","module.exports = __webpack_public_path__ + \"static/media/dumbbell.87d71c09.png\";","module.exports = __webpack_public_path__ + \"static/media/PushLogo.dddcf89c.png\";","module.exports = __webpack_public_path__ + \"static/media/PullLogo.26e15e4f.png\";","module.exports = __webpack_public_path__ + \"static/media/LegsLogo.047d97b4.png\";","import React from 'react';\nimport logo from '../dumbell.svg';\nimport {Link} from 'react-router-dom';\n\nfunction HomePage()\n{\n\n  return (\n    <div>\n      <h3>GitFit: Home</h3>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div>\n        <li><Link to=\"/login\">Login</Link></li>\n        <li><Link to=\"/register\">Register</Link></li>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction LoginPage()\n{\n  // we probably want to redirect logged in users to summary page\n  // leave summary link in for now\n  return (\n    <div>\n      <h3>GitFit: Login</h3>\n      <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './NavBar.css';\nimport homeIcon from './images/home_icon.svg';\nimport calendarIcon from './images/calendar_icon.svg';\nimport weightIcon from './images/dumbbell.png';\n\n/* Vertical NavBar using fixed positioning in CSS\n  This will be an object that provides links to all of the other user pages\n  \n  Navbar should be a list of nested links\n  The title attribute of links shows text when you hover over it\n*/\nfunction NavBar()\n{\n  return (\n    <div className='navbar'>\n      <ul>\n        <li>\n          <Link to=\"/summary\" title=\"Summary\">\n            <img src={homeIcon} className=\"navbar-icon\" alt=\"Home\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/calendar\" title=\"Calendar\">\n            <img src={calendarIcon} className=\"navbar-icon\" alt=\"Calendar\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/weights\" title=\"Weight Training\">\n            <img src={weightIcon} className=\"navbar-icon\" alt=\"Weight\" />\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport NavBar from '../NavBar';\nimport './SummaryPage.css'\n\nconst monthStrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nfunction SummaryPage()\n{\n  const [adviceObject, setAdvice] = useState({});\n\n  useEffect(() => {\n    getAdvice().then( result => {\n      if (result)\n        setAdvice(result);\n      });\n  }, []); // only load on render\n\n  async function getAdvice() {\n    try {\n      // returns an array of size 1 with advice object\n      const response = await axios.get('https://gitfit.lucasreyna.me/advice');\n      return response.data[0];     \n    }\n    catch (error){\n      // possible do something with no advice\n      console.log(error);\n      return false;\n    }\n  }\n\n  return (\n    <div id=\"summary-page\" className=\"user-page\">\n      <NavBar/>\n      <h3>GitFit: Summary</h3>\n      <h3 id='date-block'>{`${monthStrs[(new Date()).getMonth()]} ${(new Date()).getDate()}, ${(new Date()).getFullYear()}`}</h3>\n      <div id=\"mood-picker\">\n        <p>Pick a mood that describes your day:</p>\n        <ul>\n          <li><span role=\"img\" aria-label=\"Angry\">😡</span></li>\n          <li><span role=\"img\" aria-label=\"Cry\">😢</span></li>\n          <li><span role=\"img\" aria-label=\"Sick\">🤒</span></li>\n          <li><span role=\"img\" aria-label=\"Neutral\">😐</span></li>\n          <li><span role=\"img\" aria-label=\"Happy\">🙂</span></li>\n          <li><span role=\"img\" aria-label=\"Ecstatic\">🤩</span></li>\n        </ul>\n      </div>\n      <div id=\"adviceDisplay\">\n            <a href={adviceObject.source}>{adviceObject.source}</a>\n            <div id=\"advice-text-block\">\n              <span>\"{adviceObject.advice}\"</span>\n            </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SummaryPage;","import React, {Component} from 'react';\nimport './Tile.css'\n\nexport default class Tile extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {};\n   }\n\n   render() {\n      // Determine if properties are true, in order to add it to class name\n      const {\n        row, \n        col,\n        mood,\n        isNotActive,\n        num,\n        onMouseDown\n      } = this.props;\n      const extraClassName = isNotActive ? 'inactive-tile' : '';\n\n      return (\n        <div\n          id={`tile-${row}-${col}`}\n          className={`tile ${extraClassName}`}\n          onMouseDown={() => onMouseDown(row, col)}>\n            <div className='tile-num'>\n              <span>{num}</span>\n            </div>\n            <div className='tile-mood'>\n              <span >{mood}</span>\n            </div>\n        </div>\n      );\n   }\n}\n","import {createContext} from 'react';\n\nconst CalendarDateInfoContext = createContext({\n  dailyInfo: {},\n  updateDay: () => {}\n});\n\nexport default CalendarDateInfoContext;\n","import React, {useState, useEffect, useContext} from 'react'\nimport './Calendar.css'\nimport Tile from './Tile/Tile';\nimport exampleDateData from './ExampleCalendarData.json'; // For testing purposes\nimport CalendarDateInfoContext from '../context/calendar-date.context';\n\nconst NUM_COLS = 7; // seven days in a week\nconst NUM_ROWS = 6; // at most 6 weeks to display\nconst daysOfWeek = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\nconst monthStrs = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n// sets up the days of the week in table format\nfunction CalendarHeader() {\n  const dayRow = daysOfWeek.map((value, index) => {\n      return (<th key={index} className=\"day-week-text\">{value}</th>);\n    }\n  );\n    return (\n      <thead>\n        <tr>\n          {dayRow}\n        </tr>\n      </thead>\n    );\n}\n\nfunction Calendar() {\n  const [currentMonth, setCurrentMonth] = useState((new Date()).getMonth());\n  const [currentYear, setCurrentYear] = useState((new Date()).getFullYear());\n  const [selectedTile, setSelectedTile] = useState();\n  const [calendarBody, setCalendar] = useState();\n  let gridOfInfo = []; // makes grid accessible in other functions\n\n  const { updateDay } = useContext(CalendarDateInfoContext);\n\n  // runs on first render, and any time month or selected tile is changed\n  useEffect(() => {\n    setCalendar(loadCalendarBodyInfo(exampleDateData));\n  }, [currentMonth, selectedTile]);\n\n  function UpdateCalendar(incrementMonth) {\n    // in case value > 12\n    const numYears = Math.floor(Math.abs(incrementMonth / 12)) + 1;\n    const newMonthVal = currentMonth + incrementMonth;\n\n    if (newMonthVal < 0) {\n      // needed for positive modulo result\n      setCurrentMonth(((newMonthVal % 12) + 12) % 12);\n      setCurrentYear(currentYear - numYears); \n    }\n    else if (newMonthVal > 11) {\n      setCurrentMonth(newMonthVal % 12);\n      setCurrentYear(currentYear + numYears); \n    }\n    else {\n      setCurrentMonth(newMonthVal);\n    }\n\n    // reset the currently selected tile\n    if (selectedTile)\n        selectedTile.className = 'tile ';\n    setSelectedTile(undefined);\n    updateDay({}); // reset Daily Breakdown info when switching\n  }\n\n  function handleMouseDown(row, col) {\n    let tileObject = document.getElementById(`tile-${row}-${col}`);\n\n    // make sure tile is active and not already selected\n    // set tile Object as selected and change its class\n    if (tileObject.classList.length === 1) {\n      // change previous tile to a default active tile\n      // make sure it's not undefined\n      if (selectedTile)\n        selectedTile.className = 'tile ';\n      setSelectedTile(tileObject);\n      tileObject.className += 'selected-tile';\n\n      // set daily info\n      console.log(gridOfInfo);\n      let getInfo = gridOfInfo[row][col];\n      console.log(getInfo);\n      updateDay(getInfo); // this will set the context for calenderPage\n    }\n  }\n\n  // Create a matrix of row length and col length\n  function initializeGrid() {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLS; col++) {\n          const currentTile = {\n            row, // row value, set later\n            col, // col value, set later\n            def_mood: \"\", // mood value\n            def_num: \"\", // num value of tile, set later\n            onMouseDown: (row, col) => handleMouseDown(row, col),\n            isNotActive: true, // set all tiles to default\n          };\n          currentRow.push(currentTile);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  function loadCalendarBodyInfo(dateData) {\n    let currentMood = \"\";\n    let currentDay = new Date(currentYear, currentMonth, 1);\n\n    let firstDayOfWeekIndex = currentDay.getDay(); // 0 to 6, sunday is first\n    let active = false;\n    let finished = false;\n\n    const grid = initializeGrid();\n    let newInfoGrid = [];\n    let newInfoRow = undefined;\n    const calendarBody = grid.map((row, rowIndex) => {\n      // skip the first iteration, newInfoRow is undefined\n      if (newInfoRow) {\n        newInfoGrid.push(newInfoRow);\n      }\n      newInfoRow = [];\n\n      // return from the column map, whole row\n      return (\n        <tbody>\n          <tr key={rowIndex}>\n            {row.map((tile, tileIndex) => {\n              let currentInfo = { // set all info for Tile\n                calLost: \"N/A\",\n                calCons: \"N/A\",\n                weight: \"N/A\",\n                numWork: \"N/A\",\n                numStep: \"N/A\",\n                mood: \"N/A\"\n              }\n\n              // return from the row map, single Tile\n              const {onMouseDown, def_mood, def_num} = tile; // is from the currentTile Object\n\n              // wait until proper day of the week\n              if (!active) {\n                // check day of the week before index\n                if (firstDayOfWeekIndex === tileIndex && !finished)\n                {\n                  // needed to offset currentDay to 1 \n                  currentDay.setDate(currentDay.getDate() - 1);\n                  active = true;\n                }\n                else {\n                  newInfoRow.push({}); // won't be accessed anyway\n\n                  // return blank tile\n                  return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={def_mood}\n                        num={def_num}\n                        isNotActive={true}\n                        ></Tile>\n                    </td>\n                  );\n                }\n              }\n\n              if (active) {\n                currentDay.setDate(currentDay.getDate() + 1);\n                if (currentMonth === currentDay.getMonth()) {\n                  const dateText = `${monthStrs[currentMonth]} ${currentDay.getDate()}, ${currentYear}`;\n                  const thisDateData = dateData[currentYear][currentMonth][currentDay.getDate()];\n                  currentInfo.dateString = dateText;\n\n                  // check if this day has a mood loggged\n                  if (thisDateData !== undefined) {\n                    currentMood = thisDateData.mood; // may need to check if undefined\n                    \n                    // merge the two objects, if data exists it'll overwrite the 'N/A'\n                    currentInfo = {...currentInfo, ...thisDateData};\n                    newInfoRow.push(currentInfo);\n                  }\n                  else {\n                    currentMood = \"\";\n                    newInfoRow.push(currentInfo); // empty info\n                  }\n\n                  return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={currentMood}\n                        num={currentDay.getDate()}\n                        isNotActive={false}\n                        ></Tile>\n                      </td>\n                  );\n                }\n                else // return blank tile when loading ends\n                {\n                  newInfoRow.push({});\n                  finished = true;\n                  active = false;\n                  return (\n                    <td>\n                      <Tile\n                        key={tileIndex}\n                        onMouseDown={onMouseDown}\n                        row={rowIndex}\n                        col={tileIndex}\n                        mood={def_mood}\n                        num={def_num}\n                        isNotActive={true}\n                        ></Tile>\n                    </td>\n                  );\n                }\n              }\n              // return default to suppres warnings\n              return <Tile />;})\n            }\n          </tr>\n        </tbody>\n      );\n    });\n    newInfoGrid.push(newInfoRow); // must push last row\n    gridOfInfo = newInfoGrid; // set component variable to newGrid\n\n    return calendarBody;\n  }\n\n  return (\n    <div className='calendar'>\n        <div className=\"calendar-top\">\n          <button className=\"arrow-button\" onClick={() => UpdateCalendar(-1)}>&#8678;</button>\n          <span id=\"month-year-text\">{monthStrs[currentMonth]} {currentYear}</span>\n          <button className=\"arrow-button\" onClick={() => UpdateCalendar(1)}>&#8680;</button>\n        </div>\n        <table>\n            <CalendarHeader />\n            {calendarBody}\n        </table>\n    </div>\n  );\n}\n\nexport default Calendar;\n","import React, {useState} from 'react';\nimport Calendar from '../CalendarObject/Calendar';\nimport NavBar from '../NavBar';\nimport './CalendarPage.css';\nimport CalendarDateInfoContext from '../context/calendar-date.context';\n\nfunction CalendarPage()\n{\n  const [dailyInfo, setDailyInfo] = useState({\n    dateString: \"\",\n    calLost: \"\",\n    calCons: \"\",\n    weight: \"\",\n    numWork: \"\",\n    numStep: \"\",\n    mood: \"\"\n  });\n\n  const updateDay = (dailyInfo) => setDailyInfo(dailyInfo);\n\n  return (\n    <div>\n      <NavBar />\n      <h3>GitFit: Calendar</h3>\n      <div id=\"page-contents\">\n        <CalendarDateInfoContext.Provider value={{dailyInfo, updateDay}}>\n          <Calendar />\n        </CalendarDateInfoContext.Provider>\n        <div id=\"day-info-block\">\n          <div id=\"day-title\">\n            <span>Select a date to see your fitness information</span>\n            <p>{dailyInfo.dateString}</p>\n          </div>\n          <h3 style={{marginBottom: \"0\"}}>Daily Breakdown</h3>\n          <div id=\"daily-breakdown\">\n            <p>Calories Lost: {dailyInfo.calLost}</p>\n            <p>Calories Consumed: {dailyInfo.calCons}</p>\n            <p>Weight: {dailyInfo.weight}</p><br></br>\n            <p># of Workouts: {dailyInfo.numWork}</p>\n            <p># of Steps Taken: {dailyInfo.numStep}</p>\n            <p>Mood for the Day: {dailyInfo.mood}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CalendarPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './WeightsPage.css';\nimport pushLogo from \"../images/PushLogo.png\";\nimport pullLogo from \"../images/PullLogo.png\";\nimport legsLogo from \"../images/LegsLogo.png\";\nimport NavBar from '../NavBar';\n\n\nfunction WeightsPage()\n{\n    return (\n        <div >\n            <NavBar/>\n            <h1>Weight Training</h1>\n            <div class=\"block--styling\">\n                <h3>Push</h3>\n                    <img src={pushLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>\n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div class=\"block--styling\">\n                <h3>Pull</h3>\n                    <img src={pullLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>                    \n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n            <div class=\"block--styling\">\n                <h3>Legs</h3>\n                    <img src={legsLogo} alt=\"PushImage\" style={{verticalAlign: 'top', maxWidth: 200}}></img>\n                    <br></br>\n                    <label style={{textAlign: \"left\"}}>\n                        <text style={{color: 'grey', fontSize: 40}}>Enter Weight</text>                  \n                    <input type=\"text\" name=\"Push\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </div>\n\n        <div>\n        </div>\n            <Link to=\"/summary\">Summary Link for Dev Purposes</Link>\n        </div>\n    );\n}\n/*<label style={{textAlign: \"left\"}}>\n            <input type=\"text\" name=\"Push\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"center\"}}>\n            <input type=\"text\" name=\"Pull\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            <label style={{padding: 20, textAlign: \"right\"}}>\n            <input type=\"text\" name=\"Leg\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />*/\nexport default WeightsPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n// this page should show up if there is something wrong with url\nfunction ErrorPage()\n{\n\n  return (\n    <div>\n      <h3>GitFit: ErrorPage</h3>\n      <Link to=\"/\" title=\"Home Page\">Link to go back to HomePage</Link>\n    </div>\n  );\n}\n\nexport default ErrorPage;\n","import React from 'react';\nimport './App.css';\nimport HomePage from './Pages/HomePage';\nimport LoginPage from './Pages/LoginPage';\nimport RegisterPage from './Pages/LoginPage';\nimport SummaryPage from './Pages/SummaryPage';\nimport CalendarPage from './Pages/CalendarPage';\nimport WeightsPage from './Pages/WeightsPage';\nimport ErrorPage from './Pages/ErrorPage';\nimport {Route, Routes} from 'react-router-dom';\n\nfunction App() {\n\n  // note that the Route changes what's being rendered, it doesn't actually load a new page\n  // we might want to have a folder with all of the pages inside\n  return (\n    <div className=\"App\">\n        <div style={{width: \"100%\"}}>\n          <Routes>\n            <Route path=\"/\" exact element={<HomePage />}/>\n            <Route path=\"/login\" element={<LoginPage />}/>\n            <Route path=\"/register\" element={<RegisterPage />} />\n            <Route path=\"/summary\" element={<SummaryPage />} />\n            <Route path=\"/calendar\" element={<CalendarPage />} />\n            <Route path=\"/weights\" element={<WeightsPage />} />\n            <Route path=\"*\" element={<ErrorPage />}/>\n          </Routes>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/LukeSandsor/GitFit-App\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Link to GitHub Repo\n        </a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}